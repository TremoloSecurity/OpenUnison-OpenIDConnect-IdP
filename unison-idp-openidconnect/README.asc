= OpenID Connect Identity Provider

== Identity Provider Implementation

[source,xml]
---
<application name="oidc" isApp="false">
            <!-- on a single URL is allowed on an identity provider -->
            <urls>
             <!-- The regex and authChain attributes are ignored -->
                <url regex="false">
                 <!-- Any number of host tags may be specified to allow for an application to work on multiple hosts.  Additionally an asterick (*) can be specified to make this URL available for ALL hosts -->
                    <host>mlb.tremolo.lan</host>

                    <!-- The filterChain on an IdP is typically used to add attributes to the user prior to mapping into the assertion -->
                    <filterChain>
                    </filterChain>

                    <!-- The URI MUST start with /auth/idp/ -->
                    <uri>/auth/idp/oidc</uri>

                    <!-- List the various results that should happen -->
                    <results>
                        <auSuccess></auSuccess>
                        <auFail>Default Login Failure</auFail>
                        <azSuccess></azSuccess>
                        <azFail>Default Login Failure</azFail>
                    </results>

                    <!-- Determine if the currently logged in user may access the idp.  If ANY rule succeeds, the authorization succeeds.
              The scope may be one of group, dn, filter, dynamicGroup or custom
              The constraint identifies what needs to be satisfied for the authorization to pass and is dependent on the scope:
                * group - The DN of the group in OpenUnison's virtual directory (must be an instance of groupOfUniqueNames)
                * dn - The base DN of the user or users in OpenUnison's virtual directory
                * dynamicGroup - The DN of the dynamic group in OpenUnison's virtual directory (must be an instance of groupOfUrls)
                * custom - An implementation of com.tremolosecurity.proxy.az.CustomAuthorization -->
                    <azRules>
                        <rule scope="filter" constraint="(objectClass=*)"/>
                    </azRules>

                    <!-- Defines the IdP specific portions of the application -->
                    <idp className="com.tremolosecurity.idp.providers.OpenIDConnectIdP">
                     	<!-- The alias of the key used to sign JWTs -->
                        <params name="jwtSigningKey" value="unison-tls"/>

                        <!-- Database driver -->
                        <params name="driver" value="com.mysql.jdbc.Driver"/>
                        <!-- JDBC URL -->
                        <params name="url" value="jdbc:mysql://192.168.99.100:3306/unison?useSSL=true"/>
                        <!-- DB User -->
                        <params name="user" value="root"/>
                        <!-- DB Password -->
                        <params name="password" value="start123"/>
                        <!-- Maximum number of connections -->
                        <params name="maxCons" value="5"/>
                        <!-- Maximum number of connections not actively working -->
                        <params name="maxIdleCons" value="5"/>
                        <!-- The HibernateSQL dialect -->
                        <params name="dialect" value="org.hibernate.dialect.MySQL5Dialect"/>
                        <!-- Validation query to make sure the connection is still available -->
                        <params name="validationQuery" value="SELECT 1"/>


                        <!-- Determines which attributes to include in the assertion. -->
                        <!-- strict - If true then ONLY attributes specificly named in the mapping will be added -->
                        <mappings strict="true">
                         <!-- Each mapping focusses on a single attribute
                           targetAttributeName - The name of the attribute that will appear in the assertion
                           sourceType - One of user, static, or composite
                            * user - The name of an existing attribute on the user's object
                            * static - A static value that does not change regardless of the user
                            * composite - A mixture of user and static, allowing for one SAML attribute to be comprised of other attributes and static text.  Attributes are market as "${attributename}"
                           targetAttributeSource - The value to be used based on the sourceType
                         -->
                            <mapping targetAttributeName="sub" targetAttributeSource="uid" sourceType="user"/>
                            <mapping targetAttributeName="email" targetAttributeSource="mail" sourceType="user"/>
                            <mapping targetAttributeName="user_role" targetAttributeSource="user_role" sourceType="user"/>
                        </mappings>

                        <!-- Trusts establish a path between the IdP and SP/RP -->
                        <trusts>
                         	<!-- The name of the trust, should be the URL of hte client -->
                            <trust name="http://192.168.99.100">
                              <!-- The audience of the connection -->
                              <param name="clientID" value="mod_oidc_test"/>
                              <!-- A secret shared between the client and the idp -->
                              <param name="clientSecret" value="secret"/>
                              <!-- The URL to redirect clients to after authenticating -->
                              <param name="redirectURI" value="http://192.168.99.100/redirect_uri"/>
                              <!-- The last mile key to use to encrypt code token -->
                              <param name="codeLastMileKeyName" value="session-unison"/>
                              <!-- The name of the authentication chain used -->
                              <param name="authChainName" value="formloginFilter"/>
                              <!-- The number of milliseconds that the access and id token should be valid -->
                              <param name="accessTokenTimeToLive" value="60000"/>
                              <!-- The number of milliseconds to allow for clock skew for the access and id tokens -->
                              <param name="accessTokenSkewMillis" value="120000" />
                              <!-- number of milliseconds to allow for clock skew for the code token -->
                              <param name="codeTokenSkewMilis" value="90000"/>
                            </trust>
                        </trusts>
                    </idp>
                </url>
            </urls>

            <!-- The cookie configuration determines how sessions are managed for this application -->
            <cookieConfig>
             <!-- The name of the session cookie for this application.  Applications that want SSO between them should have the same cookie name -->
                <sessionCookieName>tremolosession</sessionCookieName>

                <!-- The domain of component of the cookie -->
                <domain>mlb.tremolo.lan</domain>
                <scope>-1</scope>
    <!-- The URL that OpenUnison will interpret as the URL to end the session -->
                <logoutURI>/logout</logoutURI>

                <!-- The name of the AES-256 key in the keystore to use to encrypt this session -->
                <keyAlias>session-unison</keyAlias>

                <!-- If set to true, the cookie's secure flag is set to true and the browser will only send this cookie over https connections -->
                <secure>true</secure>

                <!-- The number of seconds that the session should be allowed to be idle before no longer being valid -->
                <timeout>0</timeout>
            </cookieConfig>
        </application>
---

